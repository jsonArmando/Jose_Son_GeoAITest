# Kubernetes Deployment Configuration for Financial Reports Extractor
# Complete production-ready setup with all components

---
# Namespace
apiVersion: v1
kind: Namespace
metadata:
  name: financial-reports-extractor
  labels:
    app: financial-reports-extractor

---
# ConfigMap for application configuration
apiVersion: v1
kind: ConfigMap
metadata:
  name: app-config
  namespace: financial-reports-extractor
data:
  ENVIRONMENT: "production"
  LOG_LEVEL: "INFO"
  API_HOST: "0.0.0.0"
  API_PORT: "8000"
  API_WORKERS: "4"
  DATABASE_URL: "postgresql+asyncpg://postgres:postgres123@postgres-service:5432/financial_reports"
  REDIS_URL: "redis://:redis123@redis-service:6379/0"
  MINIO_ENDPOINT: "minio-service:9000"
  MINIO_BUCKET_NAME: "financial-documents"
  MINIO_SECURE: "false"
  SELENIUM_HUB_URL: "http://selenium-hub-service:4444/wd/hub"
  CORS_ORIGINS: '["https://yourdomain.com", "https://app.yourdomain.com"]'
  RATE_LIMIT_REQUESTS: "100"
  RATE_LIMIT_WINDOW: "60"
  METRICS_ENABLED: "true"
  PROMETHEUS_METRICS_PATH: "/metrics"

---
# Secret for sensitive configuration
apiVersion: v1
kind: Secret
metadata:
  name: app-secrets
  namespace: financial-reports-extractor
type: Opaque
stringData:
  SECRET_KEY: "your-super-secret-key-change-this-in-production"
  OPENAI_API_KEY: "your-openai-api-key-here"
  ANTHROPIC_API_KEY: "your-anthropic-api-key-here"
  DATABASE_PASSWORD: "postgres123"
  REDIS_PASSWORD: "redis123"
  MINIO_ACCESS_KEY: "minioadmin"
  MINIO_SECRET_KEY: "minioadmin123"
  JWT_SECRET: "your-jwt-secret-key"

---
# PostgreSQL Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: postgres
  namespace: financial-reports-extractor
spec:
  replicas: 1
  selector:
    matchLabels:
      app: postgres
  template:
    metadata:
      labels:
        app: postgres
    spec:
      containers:
      - name: postgres
        image: postgres:15-alpine
        ports:
        - containerPort: 5432
        env:
        - name: POSTGRES_DB
          value: "financial_reports"
        - name: POSTGRES_USER
          value: "postgres"
        - name: POSTGRES_PASSWORD
          valueFrom:
            secretKeyRef:
              name: app-secrets
              key: DATABASE_PASSWORD
        - name: POSTGRES_INITDB_ARGS
          value: "--encoding=UTF8 --lc-collate=C --lc-ctype=C"
        volumeMounts:
        - name: postgres-storage
          mountPath: /var/lib/postgresql/data
        resources:
          requests:
            memory: "256Mi"
            cpu: "250m"
          limits:
            memory: "512Mi"
            cpu: "500m"
      volumes:
      - name: postgres-storage
        persistentVolumeClaim:
          claimName: postgres-pvc

---
# PostgreSQL Service
apiVersion: v1
kind: Service
metadata:
  name: postgres-service
  namespace: financial-reports-extractor
spec:
  selector:
    app: postgres
  ports:
  - port: 5432
    targetPort: 5432
  type: ClusterIP

---
# PostgreSQL PVC
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: postgres-pvc
  namespace: financial-reports-extractor
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 10Gi

---
# Redis Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: redis
  namespace: financial-reports-extractor
spec:
  replicas: 1
  selector:
    matchLabels:
      app: redis
  template:
    metadata:
      labels:
        app: redis
    spec:
      containers:
      - name: redis
        image: redis:7-alpine
        ports:
        - containerPort: 6379
        command:
        - redis-server
        - --appendonly
        - "yes"
        - --requirepass
        - $(REDIS_PASSWORD)
        env:
        - name: REDIS_PASSWORD
          valueFrom:
            secretKeyRef:
              name: app-secrets
              key: REDIS_PASSWORD
        volumeMounts:
        - name: redis-storage
          mountPath: /data
        resources:
          requests:
            memory: "128Mi"
            cpu: "100m"
          limits:
            memory: "256Mi"
            cpu: "200m"
      volumes:
      - name: redis-storage
        persistentVolumeClaim:
          claimName: redis-pvc

---
# Redis Service
apiVersion: v1
kind: Service
metadata:
  name: redis-service
  namespace: financial-reports-extractor
spec:
  selector:
    app: redis
  ports:
  - port: 6379
    targetPort: 6379
  type: ClusterIP

---
# Redis PVC
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: redis-pvc
  namespace: financial-reports-extractor
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 2Gi

---
# MinIO Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: minio
  namespace: financial-reports-extractor
spec:
  replicas: 1
  selector:
    matchLabels:
      app: minio
  template:
    metadata:
      labels:
        app: minio
    spec:
      containers:
      - name: minio
        image: minio/minio:latest
        ports:
        - containerPort: 9000
        - containerPort: 9001
        command:
        - minio
        - server
        - /data
        - --console-address
        - ":9001"
        env:
        - name: MINIO_ROOT_USER
          valueFrom:
            secretKeyRef:
              name: app-secrets
              key: MINIO_ACCESS_KEY
        - name: MINIO_ROOT_PASSWORD
          valueFrom:
            secretKeyRef:
              name: app-secrets
              key: MINIO_SECRET_KEY
        volumeMounts:
        - name: minio-storage
          mountPath: /data
        resources:
          requests:
            memory: "256Mi"
            cpu: "250m"
          limits:
            memory: "512Mi"
            cpu: "500m"
      volumes:
      - name: minio-storage
        persistentVolumeClaim:
          claimName: minio-pvc

---
# MinIO Service
apiVersion: v1
kind: Service
metadata:
  name: minio-service
  namespace: financial-reports-extractor
spec:
  selector:
    app: minio
  ports:
  - name: api
    port: 9000
    targetPort: 9000
  - name: console
    port: 9001
    targetPort: 9001
  type: ClusterIP

---
# MinIO PVC
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: minio-pvc
  namespace: financial-reports-extractor
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 20Gi

---
# Selenium Hub Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: selenium-hub
  namespace: financial-reports-extractor
spec:
  replicas: 1
  selector:
    matchLabels:
      app: selenium-hub
  template:
    metadata:
      labels:
        app: selenium-hub
    spec:
      containers:
      - name: selenium-hub
        image: selenium/hub:4.15.0
        ports:
        - containerPort: 4444
        env:
        - name: GRID_MAX_SESSION
          value: "5"
        - name: GRID_BROWSER_TIMEOUT
          value: "300"
        - name: GRID_TIMEOUT
          value: "300"
        resources:
          requests:
            memory: "256Mi"
            cpu: "200m"
          limits:
            memory: "512Mi"
            cpu: "400m"

---
# Selenium Hub Service
apiVersion: v1
kind: Service
metadata:
  name: selenium-hub-service
  namespace: financial-reports-extractor
spec:
  selector:
    app: selenium-hub
  ports:
  - port: 4444
    targetPort: 4444
  type: ClusterIP

---
# Selenium Chrome Node Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: selenium-chrome
  namespace: financial-reports-extractor
spec:
  replicas: 2
  selector:
    matchLabels:
      app: selenium-chrome
  template:
    metadata:
      labels:
        app: selenium-chrome
    spec:
      containers:
      - name: selenium-chrome
        image: selenium/node-chrome:4.15.0
        env:
        - name: HUB_HOST
          value: "selenium-hub-service"
        - name: HUB_PORT
          value: "4444"
        - name: NODE_MAX_INSTANCES
          value: "3"
        - name: NODE_MAX_SESSION
          value: "3"
        volumeMounts:
        - name: shm-volume
          mountPath: /dev/shm
        resources:
          requests:
            memory: "512Mi"
            cpu: "300m"
          limits:
            memory: "1Gi"
            cpu: "600m"
      volumes:
      - name: shm-volume
        emptyDir:
          medium: Memory
          sizeLimit: 2Gi

---
# Main Application Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: financial-reports-extractor
  namespace: financial-reports-extractor
spec:
  replicas: 3
  selector:
    matchLabels:
      app: financial-reports-extractor
  template:
    metadata:
      labels:
        app: financial-reports-extractor
    spec:
      initContainers:
      - name: db-migration
        image: financial-reports-extractor:latest
        command: ['python', 'scripts/setup.py', 'migrate']
        envFrom:
        - configMapRef:
            name: app-config
        - secretRef:
            name: app-secrets
      containers:
      - name: api
        image: financial-reports-extractor:latest
        ports:
        - containerPort: 8000
        envFrom:
        - configMapRef:
            name: app-config
        - secretRef:
            name: app-secrets
        livenessProbe:
          httpGet:
            path: /health
            port: 8000
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /health/ready
            port: 8000
          initialDelaySeconds: 5
          periodSeconds: 5
        resources:
          requests:
            memory: "512Mi"
            cpu: "300m"
          limits:
            memory: "1Gi"
            cpu: "600m"
        volumeMounts:
        - name: storage
          mountPath: /app/storage
      volumes:
      - name: storage
        persistentVolumeClaim:
          claimName: app-storage-pvc

---
# Application Service
apiVersion: v1
kind: Service
metadata:
  name: financial-reports-extractor-service
  namespace: financial-reports-extractor
spec:
  selector:
    app: financial-reports-extractor
  ports:
  - port: 80
    targetPort: 8000
  type: ClusterIP

---
# Application PVC
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: app-storage-pvc
  namespace: financial-reports-extractor
spec:
  accessModes:
    - ReadWriteMany
  resources:
    requests:
      storage: 50Gi

---
# Celery Worker Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: celery-worker
  namespace: financial-reports-extractor
spec:
  replicas: 3
  selector:
    matchLabels:
      app: celery-worker
  template:
    metadata:
      labels:
        app: celery-worker
    spec:
      containers:
      - name: celery-worker
        image: financial-reports-extractor:latest
        command: ['celery', '-A', 'src.infrastructure.messaging.celery_app', 'worker', '--loglevel=info', '--concurrency=4']
        envFrom:
        - configMapRef:
            name: app-config
        - secretRef:
            name: app-secrets
        resources:
          requests:
            memory: "512Mi"
            cpu: "300m"
          limits:
            memory: "1Gi"
            cpu: "600m"
        volumeMounts:
        - name: storage
          mountPath: /app/storage
      volumes:
      - name: storage
        persistentVolumeClaim:
          claimName: app-storage-pvc

---
# Celery Beat Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: celery-beat
  namespace: financial-reports-extractor
spec:
  replicas: 1
  selector:
    matchLabels:
      app: celery-beat
  template:
    metadata:
      labels:
        app: celery-beat
    spec:
      containers:
      - name: celery-beat
        image: financial-reports-extractor:latest
        command: ['celery', '-A', 'src.infrastructure.messaging.celery_app', 'beat', '--loglevel=info']
        envFrom:
        - configMapRef:
            name: app-config
        - secretRef:
            name: app-secrets
        resources:
          requests:
            memory: "256Mi"
            cpu: "100m"
          limits:
            memory: "512Mi"
            cpu: "200m"

---
# Ingress for external access
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: financial-reports-extractor-ingress
  namespace: financial-reports-extractor
  annotations:
    kubernetes.io/ingress.class: "nginx"
    cert-manager.io/cluster-issuer: "letsencrypt-prod"
    nginx.ingress.kubernetes.io/rate-limit: "100"
    nginx.ingress.kubernetes.io/rate-limit-window: "1m"
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
spec:
  tls:
  - hosts:
    - api.yourdomain.com
    secretName: api-tls-secret
  rules:
  - host: api.yourdomain.com
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: financial-reports-extractor-service
            port:
              number: 80

---
# Horizontal Pod Autoscaler for API
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: financial-reports-extractor-hpa
  namespace: financial-reports-extractor
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: financial-reports-extractor
  minReplicas: 3
  maxReplicas: 10
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 70
  - type: Resource
    resource:
      name: memory
      target:
        type: Utilization
        averageUtilization: 80

---
# HPA for Celery Workers
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: celery-worker-hpa
  namespace: financial-reports-extractor
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: celery-worker
  minReplicas: 3
  maxReplicas: 15
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 70

---
# Network Policy for security
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: financial-reports-extractor-netpol
  namespace: financial-reports-extractor
spec:
  podSelector: {}
  policyTypes:
  - Ingress
  - Egress
  ingress:
  - from:
    - namespaceSelector:
        matchLabels:
          name: ingress-nginx
  - from:
    - podSelector: {}
  egress:
  - {}

---
# Service Monitor for Prometheus
apiVersion: monitoring.coreos.com/v1
kind: ServiceMonitor
metadata:
  name: financial-reports-extractor-metrics
  namespace: financial-reports-extractor
  labels:
    app: financial-reports-extractor
spec:
  selector:
    matchLabels:
      app: financial-reports-extractor
  endpoints:
  - port: http
    path: /metrics
    interval: 30s

---
# Pod Disruption Budget
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: financial-reports-extractor-pdb
  namespace: financial-reports-extractor
spec:
  minAvailable: 2
  selector:
    matchLabels:
      app: financial-reports-extractor